[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "schemathesis"
version = "3.20.2"
description = "Property-based testing framework for Open API and GraphQL based apps"
keywords = ["pytest", "hypothesis", "openapi", "swagger", "graphql", "testing"]
authors = [{ name = "Dmitry Dygalo", email = "dadygalo@gmail.com" }]
maintainers = [{ name = "Dmitry Dygalo", email = "dadygalo@gmail.com" }]
requires-python = ">=3.7"
license = "MIT"
readme = "README.md"
include = ["src/schemathesis/py.typed"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Framework :: Pytest",
    "Framework :: Hypothesis",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "backoff>=2.1.2,<3.0",
    "click>=7.0,<9.0",
    "colorama>=0.4,<1.0",
    "httpx>=0.22.0,<1.0",
    "hypothesis>=6.31.6,<7",
    "hypothesis_graphql>=0.9.0,<1",
    "hypothesis_jsonschema>=0.22.1,<0.23",
    "importlib_metadata>=1.1,!=3.8,<5; python_version<'3.8'",
    "jsonschema>=4.3.2,<5.0",
    "junit-xml>=1.9,<2.0",
    "pyrate-limiter>=2.10,<3.0",
    "pytest-subtests>=0.2.1,<0.8.0",
    "pytest>=4.6.4,<8",
    "PyYAML>=5.1,<7.0",
    "requests>=2.22,<3",
    "starlette>=0.13,<1",
    "starlette-testclient==0.2.0",
    "tomli-w>=1.0.0,<2.0",
    "tomli>=2.0.1,<3.0",
    "typing-extensions>=3.7,<5",
    "werkzeug>=0.16.0,<4",
    "yarl>=1.5,<2.0"
]
[project.optional-dependencies]
tests = [
    "aiohttp>=3.8.3,<4.0",
    "coverage>=6",
    "fastapi>=0.86.0",
    "Flask>=2.1.1,<3.0",
    "pydantic>=1.10.2",
    "pytest-asyncio>=0.18.0,<1.0",
    "pytest-httpserver>=1.0,<2.0",
    "pytest-mock>=3.7.0,<4.0",
    "pytest-xdist>=3,<4.0",
    "strawberry-graphql[fastapi]>=0.109.0",
    "syrupy>=2,<5.0",
    "trustme>=0.9.0,<1.0"
]
cov = [
    "coverage-enable-subprocess",
    "coverage[toml]>=5.3",
]
bench = [
    "pytest-codspeed==2.2.0",
]
docs = [
    "sphinx",
    "sphinx_rtd_theme",
    "sphinx-click",
]
dev = ["schemathesis[tests,cov,bench,docs]"]

[project.urls]
Documentation = "https://schemathesis.readthedocs.io/en/stable/"
Changelog = "https://schemathesis.readthedocs.io/en/stable/changelog.html"
"Bug Tracker" = "https://github.com/schemathesis/schemathesis"
Funding = "https://github.com/sponsors/Stranger6667"
"Source Code" = "https://github.com/schemathesis/schemathesis"

[project.scripts]
schemathesis = "schemathesis.cli:schemathesis"
st = "schemathesis.cli:schemathesis"

[project.entry-points.pytest11]
schemathesis = "schemathesis.extra.pytest_plugin"

[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = "tests"
norecursedirs = ".hypothesis .idea .git src docs .pytest_cache .mypy_cache .tox"

[tool.coverage.run]
parallel = true
branch = true
source_pkgs = ["schemathesis"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass"
]

[tool.ruff]
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "D",  # pydocstyle
]
ignore = [
    "E501",  # Line too long
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Too complex
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in `__init__`
    "D203",  # One blank line before class
    "D213",  # Multiline summary second line
    "D401",  # Imperative mood
]
target-version = "py37"

# Ignore `F401` (unused import) in all `__init__.py` & `_compat.py` files.
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"_compat.py" = ["F401"]

[tool.ruff.format]
skip-magic-trailing-comma = false

[tool.ruff.isort]
known-first-party = ["schemathesis"]
known-third-party = ["_pytest", "aiohttp", "click", "curlify", "fastapi", "flask", "graphene", "graphql", "graphql_server", "hypothesis", "hypothesis_graphql", "hypothesis_jsonschema", "jsonschema", "junit_xml", "packaging", "pydantic", "pytest", "pytest_subtests", "requests", "schemathesis", "starlette", "typing_extensions", "urllib3", "werkzeug", "yaml", "yarl"]
